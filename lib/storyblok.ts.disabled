/**
 * Storyblok configuration for Festival Art Déco site
 * Modern setup for Next.js Pages Router with TypeScript
 */

import { storyblokInit, apiPlugin } from '@storyblok/react';

// Import composants qui seront créés
// import HeroSection from '@/components/storyblok/HeroSection';
// import AboutSection from '@/components/storyblok/AboutSection';
// import PartnersSection from '@/components/storyblok/PartnersSection';
// import OnTheWaySection from '@/components/storyblok/OnTheWaySection';
// import DecoBallSection from '@/components/storyblok/DecoBallSection';
// import ContactSection from '@/components/storyblok/ContactSection';
// import TextBlock from '@/components/storyblok/TextBlock';
// import TitleBlock from '@/components/storyblok/TitleBlock';

// Configuration Storyblok
const { storyblokApi } = storyblokInit({
  // Token d'accès (sera défini dans .env.local)
  accessToken: process.env.NEXT_PUBLIC_STORYBLOK_ACCESS_TOKEN,
  
  // Plugin API pour récupérer le contenu
  use: [apiPlugin],
  
  // Enregistrement des composants (à débloquer progressivement)
  components: {
    // Pages
    // 'festival-page': FestivalPage,
    
    // Sections principales
    // 'hero-section': HeroSection,
    // 'about-section': AboutSection,
    // 'partners-section': PartnersSection,
    // 'on-the-way-section': OnTheWaySection,
    // 'deco-ball-section': DecoBallSection,
    // 'contact-section': ContactSection,
    
    // Blocs de contenu
    // 'text-block': TextBlock,
    // 'title-block': TitleBlock,
  },
  
  // Configuration API
  apiOptions: {
    region: 'eu', // Région européenne
    cache: {
      clear: 'auto',
      type: 'memory'
    }
  },
  
  // Enable le composant de fallback pour les composants non trouvés
  enableFallbackComponent: true,
});

// Export de l'API pour utilisation dans les pages
export { storyblokApi };

// Types pour le contenu bilingue (alignés sur l'architecture actuelle)
export interface BilingualContent<T> {
  fr: T;
  en: T;
}

// Types pour les sections principales identifiées
export interface StoryblokHeroContent {
  title: BilingualContent<string>;
  subtitle: BilingualContent<string>;
  date: BilingualContent<string>;
  location: BilingualContent<string>;
  cta: BilingualContent<string>;
}

export interface StoryblokTextBlock {
  content: BilingualContent<string>;
  highlighted_phrases?: BilingualContent<string[]>;
}

export interface StoryblokSection {
  title: BilingualContent<string>;
  blocks: StoryblokTextBlock[];
  images?: string[];
}

// Interface principale pour une page de festival
export interface StoryblokFestivalPage {
  hero: StoryblokHeroContent;
  about: StoryblokSection;
  partners: StoryblokSection;
  on_the_way: StoryblokSection;
  deco_ball: StoryblokSection;
  contact: {
    heading: BilingualContent<string>;
    intro: BilingualContent<string>;
    phone: string;
    email: string;
    website: string;
    whatsapp: BilingualContent<string>;
  };
  navigation: BilingualContent<{
    hero: string;
    about: string;
    partners: string;
    ontheway: string;
    decoball: string;
    contact: string;
    tickets: string;
  }>;
}

// Helper pour récupérer une histoire avec cache
export async function getStory(slug: string, version: 'draft' | 'published' = 'published') {
  const { data } = await storyblokApi.get(`cdn/stories/${slug}`, {
    version,
    // Force le cache pour éviter les requêtes multiples
    cache_version: Date.now(),
  });
  return data.story;
}

// Helper pour récupérer toutes les histoires d'un type
export async function getStoriesByContentType(content_type: string) {
  const { data } = await storyblokApi.get('cdn/stories', {
    starts_with: content_type,
    version: 'published',
  });
  return data.stories;
}